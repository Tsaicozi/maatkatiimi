#!/usr/bin/env python3
"""
Testaa ett√§ CancelledError k√§sittely toimii oikein l√§hdeadaptereissa
"""

import asyncio
import contextlib
from sources.raydium_newpools import RaydiumNewPoolsSource

async def test_cancelled_error_handling():
    """Testaa ett√§ CancelledError kuplii ulos oikein"""
    print("üß™ Testataan CancelledError k√§sittely√§...")
    
    # Mock WebSocket client joka heitt√§√§ CancelledError:in
    class MockWSClient:
        async def subscribe_new_pools(self):
            print("Mock: Tilattu new pools")
        
        async def unsubscribe_new_pools(self):
            print("Mock: Tilaus peruttu")
        
        async def listen(self):
            # Simuloi ett√§ WebSocket heitt√§√§ CancelledError:in
            await asyncio.sleep(0.1)
            raise asyncio.CancelledError("WebSocket peruttu")
    
    # Luo source ja testaa
    ws_client = MockWSClient()
    source = RaydiumNewPoolsSource(ws_client)
    
    queue = asyncio.Queue()
    
    try:
        await source.start()
        
        # Aja source ja odota ett√§ se heitt√§√§ CancelledError:in
        task = asyncio.create_task(source.run(queue))
        
        # Odota ett√§ task p√§√§ttyy
        try:
            await task
            print("‚ùå Task ei heitt√§nyt CancelledError:ia")
        except asyncio.CancelledError:
            print("‚úÖ CancelledError kuplii ulos oikein")
        
        # Tarkista ett√§ task on todella p√§√§ttynyt
        if task.done():
            print("‚úÖ Task p√§√§ttyi oikein")
        else:
            print("‚ùå Task ei p√§√§ttynyt")
            
    except Exception as e:
        print(f"‚ùå Odottamaton virhe: {e}")
    finally:
        await source.stop()
    
    print("üéâ CancelledError testi valmis!")

if __name__ == "__main__":
    asyncio.run(test_cancelled_error_handling())


