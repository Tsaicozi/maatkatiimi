#!/usr/bin/env python3
"""
AutomaticHybridBot DiscoveryEngine testi
"""

import asyncio
from automatic_hybrid_bot import AutomaticHybridBot

async def test_automatic_bot():
    """Testaa AutomaticHybridBot DiscoveryEngine integraatio"""
    print("üß™ Testataan AutomaticHybridBot DiscoveryEngine integraatiota...")
    
    try:
        # Luo bot instance testimoodissa (max 2 sykli√§, max 30 sekuntia)
        bot = AutomaticHybridBot(max_cycles=2, max_runtime_sec=30.0)
        print('‚úÖ AutomaticHybridBot luotu onnistuneesti (testimoodi: max 2 sykli√§, 30s)')
        
        # Tarkista ett√§ se voi luoda HybridTradingBot:in
        if hasattr(bot, 'trading_bot_class'):
            print('‚úÖ trading_bot_class l√∂ytyy')
            trading_bot = bot.trading_bot_class()
            if hasattr(trading_bot, 'discovery_engine'):
                print('‚úÖ DiscoveryEngine l√∂ytyy trading bot:ista')
                if trading_bot.discovery_engine is not None:
                    print('‚úÖ DiscoveryEngine on alustettu')
                    print(f'   - RPC endpoint: {trading_bot.discovery_engine.rpc_endpoint}')
                    print(f'   - Market sources: {len(trading_bot.discovery_engine.market_sources)}')
                    print(f'   - Min liquidity: ${trading_bot.discovery_engine.min_liq_usd:,.0f}')
                else:
                    print('‚ö†Ô∏è DiscoveryEngine on None')
            else:
                print('‚ùå DiscoveryEngine puuttuu trading bot:ista')
        else:
            print('‚ùå trading_bot_class puuttuu')
            
        # Tarkista ett√§ bot voi k√§ynnist√§√§ DiscoveryEngine:in
        if hasattr(bot, 'trading_bot') and bot.trading_bot:
            if hasattr(bot.trading_bot, 'discovery_engine') and bot.trading_bot.discovery_engine:
                print('‚úÖ DiscoveryEngine l√∂ytyy bot.trading_bot:ista')
                # K√§ynnist√§ DiscoveryEngine
                await bot.trading_bot.discovery_engine.start()
                print('‚úÖ DiscoveryEngine k√§ynnistetty')
                
                # Testaa bot.stop() metodia
                if hasattr(bot.trading_bot, 'stop'):
                    await bot.trading_bot.stop()
                    print('‚úÖ trading_bot.stop() toimii')
                else:
                    # Fallback: sammuta suoraan DiscoveryEngine
                    await bot.trading_bot.discovery_engine.stop()
                    print('‚úÖ DiscoveryEngine sammutettu suoraan')
            else:
                print('‚ö†Ô∏è DiscoveryEngine puuttuu bot.trading_bot:ista')
        else:
            print('‚ö†Ô∏è bot.trading_bot puuttuu')
        
        # Testaa testimoodi - k√§ynnist√§ bot lyhyeksi ajaksi
        print('üîÑ Testataan testimoodia - k√§ynnistet√§√§n bot...')
        try:
            # K√§ynnist√§ bot taustalla
            bot_task = asyncio.create_task(bot.run())
            
            # Odota ett√§ bot lopettaa testimoodissa
            await bot_task
            print('‚úÖ Bot lopetti testimoodissa onnistuneesti')
            
        except Exception as e:
            print(f'‚ö†Ô∏è Bot testimoodi virhe: {e}')
            # Varmista ett√§ bot pys√§htyy
            bot.stop()
            
        print("üéâ AutomaticHybridBot testi valmis!")
        
    except Exception as e:
        print(f"‚ùå Virhe: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_automatic_bot())
