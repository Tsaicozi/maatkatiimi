#!/usr/bin/env python3
"""
Testaa conftest.py fixture:t
"""

import asyncio
import pytest

@pytest.mark.asyncio
async def test_no_task_leaks_fixture():
    """Testaa ettÃ¤ no_task_leaks fixture toimii"""
    print("ğŸ§ª Testataan no_task_leaks fixture...")
    
    # Luo taustatehtÃ¤vÃ¤ joka jÃ¤isi roikkumaan ilman fixture:tÃ¤
    async def background_task():
        try:
            while True:
                await asyncio.sleep(0.1)
        except asyncio.CancelledError:
            print("âœ… Background task peruttu")
            raise
    
    # KÃ¤ynnistÃ¤ taustatehtÃ¤vÃ¤
    task = asyncio.create_task(background_task())
    
    # Odota hetki
    await asyncio.sleep(0.2)
    
    # Tarkista ettÃ¤ task on vielÃ¤ kÃ¤ynnissÃ¤
    assert not task.done()
    print("âœ… Background task kÃ¤ynnissÃ¤")
    
    # Testi pÃ¤Ã¤ttyy - fixture:n pitÃ¤isi siivota task
    print("âœ… Testi pÃ¤Ã¤ttyy - fixture siivoaa taustatehtÃ¤vÃ¤n")

@pytest.mark.asyncio
async def test_multiple_background_tasks():
    """Testaa ettÃ¤ fixture siivoaa useita taustatehtÃ¤viÃ¤"""
    print("ğŸ§ª Testataan useita taustatehtÃ¤viÃ¤...")
    
    async def task1():
        try:
            while True:
                await asyncio.sleep(0.1)
        except asyncio.CancelledError:
            print("âœ… Task1 peruttu")
            raise
    
    async def task2():
        try:
            while True:
                await asyncio.sleep(0.1)
        except asyncio.CancelledError:
            print("âœ… Task2 peruttu")
            raise
    
    # KÃ¤ynnistÃ¤ useita taustatehtÃ¤viÃ¤
    tasks = [
        asyncio.create_task(task1()),
        asyncio.create_task(task2())
    ]
    
    # Odota hetki
    await asyncio.sleep(0.2)
    
    # Tarkista ettÃ¤ taskit ovat vielÃ¤ kÃ¤ynnissÃ¤
    for i, task in enumerate(tasks):
        assert not task.done()
        print(f"âœ… Task{i+1} kÃ¤ynnissÃ¤")
    
    # Testi pÃ¤Ã¤ttyy - fixture:n pitÃ¤isi siivota kaikki taskit
    print("âœ… Testi pÃ¤Ã¤ttyy - fixture siivoaa kaikki taustatehtÃ¤vÃ¤t")

def test_sync_test_with_fixture():
    """Testaa ettÃ¤ fixture toimii myÃ¶s sync testeissÃ¤"""
    print("ğŸ§ª Testataan sync testi fixture:lla...")
    
    # Sync testi ei tarvitse erityistÃ¤ kÃ¤sittelyÃ¤
    assert True
    print("âœ… Sync testi toimii")

if __name__ == "__main__":
    # Suorita testit pytest:llÃ¤
    import subprocess
    import sys
    
    result = subprocess.run([
        sys.executable, "-m", "pytest", 
        __file__, 
        "-v", 
        "--tb=short"
    ], capture_output=True, text=True)
    
    print("STDOUT:")
    print(result.stdout)
    print("\nSTDERR:")
    print(result.stderr)
    print(f"\nReturn code: {result.returncode}")


