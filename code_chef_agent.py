#!/usr/bin/env python3
"""
OpenAI GPT-5 Code Chef Agent
Koodin keitt√§j√§ agentti joka toimii yhdess√§ analysoijan kanssa
"""

import openai
import os
import json
import asyncio
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from code_analyzer_agent import CodeAnalyzerAgent

# Lataa .env tiedosto
load_dotenv()

class CodeChefAgent:
    """OpenAI GPT-5 koodin keitt√§j√§ agentti"""
    
    def __init__(self, api_key=None, model="gpt-4"):
        """Alusta koodin keitt√§j√§ agentti"""
        self.api_key = api_key or os.getenv('OPENAI_API_KEY')
        if not self.api_key:
            raise ValueError("OpenAI API avain puuttuu. Aseta OPENAI_API_KEY environment variable.")
        
        openai.api_key = self.api_key
        self.model = model
        self.analyzer = CodeAnalyzerAgent(api_key=self.api_key, model=model)
        self.development_history = []
        
    async def cook_code(self, requirements: str, target_file: str = None, context: str = None) -> dict:
        """Keit√§ koodia annettujen vaatimusten mukaan"""
        try:
            print(f"üç≥ Aloitetaan koodin keitt√§minen...")
            print(f"üìã Vaatimukset: {requirements}")
            
            # Analysoi nykyinen koodi jos konteksti annettu
            analysis_context = ""
            if context and Path(context).exists():
                print(f"üîç Analysoidaan nykyinen koodi: {context}")
                analysis = self.analyzer.analyze_code_file(context, "comprehensive")
                if analysis and analysis.get('analysis'):
                    analysis_text = analysis['analysis']
                    analysis_context = f"\n\nNYKYINEN KOODI ANALYYSI:\n{analysis_text}"
            
            # Luo keitt√§j√§ prompt
            prompt = self._create_cooking_prompt(requirements, target_file, analysis_context)
            
            # L√§het√§ OpenAI:lle
            client = openai.OpenAI(api_key=self.api_key)
            response = client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "Olet asiantuntija Python kehitt√§j√§ ja arkkitehti. Keit√§t korkealaatuista, turvallista ja tehokasta koodia. Noudatat best practices ja modernia Python-kehityst√§."},
                    {"role": "user", "content": prompt}
                ],
                max_completion_tokens=2000
            )
            
            code_result = response.choices[0].message.content
            
            # Tallenna kehityshistoria
            cooking_record = {
                "timestamp": datetime.now().isoformat(),
                "requirements": requirements,
                "target_file": target_file,
                "context": context,
                "generated_code": code_result,
                "model_used": self.model
            }
            self.development_history.append(cooking_record)
            
            print(f"‚úÖ Koodi keitetty onnistuneesti!")
            return cooking_record
            
        except Exception as e:
            print(f"‚ùå Virhe koodin keitt√§misess√§: {e}")
            return {
                "timestamp": datetime.now().isoformat(),
                "error": str(e),
                "requirements": requirements
            }
    
    def _create_cooking_prompt(self, requirements: str, target_file: str = None, analysis_context: str = "") -> str:
        """Luo koodin keitt√§j√§ prompt"""
        
        prompt = f"""
KEHIT√Ñ PYTHON KOODIA seuraavien vaatimusten mukaan:

VAATIMUKSET:
{requirements}

{'TARGET FILE: ' + target_file if target_file else ''}
{analysis_context}

OHJEET:
1. Keit√§ korkealaatuista, tuotantovalmista Python koodia
2. Noudata best practices: typing, error handling, logging, security
3. K√§yt√§ modernia Python 3.11+ syntaksia
4. Lis√§√§ kattavat docstringit ja kommentit
5. Implementoi proper exception handling
6. K√§yt√§ async/await kun sopii
7. Lis√§√§ type hints kaikille funktioille
8. K√§yt√§ dataclass tai Pydantic malleja kun sopii
9. Lis√§√§ logging ja monitoring
10. Implementoi retry logic ja circuit breaker patterns kun tarpeen

VASTAUS MUODOSSA:
```python
# [T√§ydellinen Python koodi t√§ss√§]
```

KERRO MY√ñS:
- Mit√§ koodi tekee
- Miksi valitsit tietyn arkkitehtuurin
- Mit√§ best practices noudatit
- Mit√§ optimointeja teit
"""
        return prompt
    
    async def improve_code(self, file_path: str, improvement_suggestions: str) -> dict:
        """Paranna olemassa olevaa koodia"""
        try:
            print(f"üîß Parannetaan koodia: {file_path}")
            
            # Analysoi nykyinen koodi
            analysis = self.analyzer.analyze_code_file(file_path, "comprehensive")
            
            # Luo parannus prompt
            prompt = f"""
PARANNA SEURAAVAA PYTHON KOODIA:

NYKYINEN KOODI (tiedosto: {file_path}):
{Path(file_path).read_text(encoding='utf-8') if Path(file_path).exists() else 'Tiedosto ei l√∂ytynyt'}

PARANNUSEHDOTUKSET:
{improvement_suggestions}

{('ANALYYSI NYKYISEST√Ñ KOODISTA:' + chr(10) + analysis['analysis']) if analysis and analysis.get('analysis') else ''}

OHJEET:
1. Korjaa l√∂ydetyt ongelmat
2. Implementoi parannusehdotukset
3. S√§ilyt√§ nykyinen toiminnallisuus
4. Lis√§√§ parempi error handling
5. Paranna suorituskyky√§
6. Lis√§√§ type hints ja dokumentaatio
7. Noudata Python best practices

VASTAUS MUODOSSA:
```python
# [Parannettu Python koodi t√§ss√§]
```

KERRO MY√ñS:
- Mit√§ parannuksia teit
- Miksi valitsit tietyn ratkaisun
- Mit√§ ongelmia korjasit
"""
            
            client = openai.OpenAI(api_key=self.api_key)
            response = client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "Olet asiantuntija Python koodin parantaja. Korjaat ongelmat ja implementoit parannukset s√§ilytt√§en toiminnallisuuden."},
                    {"role": "user", "content": prompt}
                ],
                max_completion_tokens=2000
            )
            
            improved_code = response.choices[0].message.content
            
            improvement_record = {
                "timestamp": datetime.now().isoformat(),
                "file_path": file_path,
                "improvement_suggestions": improvement_suggestions,
                "original_analysis": analysis,
                "improved_code": improved_code,
                "model_used": self.model
            }
            self.development_history.append(improvement_record)
            
            print(f"‚úÖ Koodi parannettu onnistuneesti!")
            return improvement_record
            
        except Exception as e:
            print(f"‚ùå Virhe koodin parantamisessa: {e}")
            return {
                "timestamp": datetime.now().isoformat(),
                "error": str(e),
                "file_path": file_path
            }
    
    async def create_feature(self, feature_description: str, target_file: str = None) -> dict:
        """Luo uusi feature annetun kuvauksen mukaan"""
        try:
            print(f"üÜï Luodaan uusi feature: {feature_description}")
            
            prompt = f"""
LUO UUSI PYTHON FEATURE:

FEATURE KUVAUS:
{feature_description}

{'TARGET FILE: ' + target_file if target_file else ''}

OHJEET:
1. Luo t√§ydellinen, tuotantovalmis feature
2. K√§yt√§ modernia Python arkkitehtuuria
3. Lis√§√§ kattavat testit
4. Implementoi proper error handling
5. Lis√§√§ logging ja monitoring
6. K√§yt√§ async/await kun sopii
7. Lis√§√§ type hints ja dokumentaatio
8. K√§yt√§ dependency injection kun sopii
9. Implementoi retry logic kun tarpeen
10. Lis√§√§ configuration management

VASTAUS MUODOSSA:
```python
# [T√§ydellinen feature koodi t√§ss√§]
```

KERRO MY√ñS:
- Mit√§ feature tekee
- Miten se integroituu muuhun koodiin
- Mit√§ design patterns k√§ytit
- Mit√§ best practices noudatit
"""
            
            client = openai.OpenAI(api_key=self.api_key)
            response = client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "Olet asiantuntija Python feature kehitt√§j√§. Luot korkealaatuisia, skaalautuvia ja yll√§pidett√§vi√§ featureita."},
                    {"role": "user", "content": prompt}
                ],
                max_completion_tokens=2000
            )
            
            feature_code = response.choices[0].message.content
            
            feature_record = {
                "timestamp": datetime.now().isoformat(),
                "feature_description": feature_description,
                "target_file": target_file,
                "generated_code": feature_code,
                "model_used": self.model
            }
            self.development_history.append(feature_record)
            
            print(f"‚úÖ Feature luotu onnistuneesti!")
            return feature_record
            
        except Exception as e:
            print(f"‚ùå Virhe feature luomisessa: {e}")
            return {
                "timestamp": datetime.now().isoformat(),
                "error": str(e),
                "feature_description": feature_description
            }
    
    def save_development_history(self, output_file: str = None) -> str:
        """Tallenna kehityshistoria"""
        if not output_file:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"code_development_history_{timestamp}.json"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(self.development_history, f, indent=2, ensure_ascii=False)
        
        print(f"üìä Kehityshistoria tallennettu: {output_file}")
        return output_file
    
    def print_development_summary(self):
        """Tulosta kehitysyhteenveto"""
        print("\n" + "="*80)
        print("üç≥ KODIN KEITT√ÑJ√Ñ KEHDITYSYHTEENVETO")
        print("="*80)
        
        print(f"üìà Yhteens√§ kehitetty: {len(self.development_history)} koodia")
        
        for i, record in enumerate(self.development_history, 1):
            print(f"\n‚úÖ Kehitys {i}:")
            print(f"   Aikaleima: {record['timestamp']}")
            print(f"   Malli: {record.get('model_used', 'N/A')}")
            
            if 'requirements' in record:
                print(f"   Vaatimukset: {record['requirements'][:100]}...")
            elif 'feature_description' in record:
                print(f"   Feature: {record['feature_description'][:100]}...")
            elif 'file_path' in record:
                print(f"   Parannettu: {record['file_path']}")
        
        print("\n" + "="*80)

async def main():
    """P√§√§funktio"""
    print("üöÄ K√§ynnistet√§√§n OpenAI GPT-5 Koodin Keitt√§j√§ Agentti...")
    
    try:
        chef = CodeChefAgent()
        
        # Esimerkki: Luo uusi feature
        feature_result = await chef.create_feature(
            "Luo Telegram bot integraatio joka tukee MarkdownV2 muotoilua ja escapettaa teksti turvallisesti",
            "telegram_bot_v2.py"
        )
        
        if feature_result and not feature_result.get('error'):
            print(f"\nüç≥ Luotu feature:")
            print(f"üìù Koodi pituus: {len(feature_result.get('generated_code', ''))} merkki√§")
        
        # Esimerkki: Paranna olemassa olevaa koodia
        improvement_result = await chef.improve_code(
            "telegram_bot_integration.py",
            "Lis√§√§ Markdown-escaping, viestin pituusrajan tarkistus, ja yksi ClientSession uudelleenk√§ytt√∂"
        )
        
        if improvement_result and not improvement_result.get('error'):
            print(f"\nüîß Parannettu koodi:")
            print(f"üìù Koodi pituus: {len(improvement_result.get('improved_code', ''))} merkki√§")
        
        # Tallenna kehityshistoria
        chef.save_development_history()
        chef.print_development_summary()
        
        print("\n‚úÖ Koodin keitt√§j√§ agentti valmis!")
        
    except Exception as e:
        print(f"‚ùå Virhe: {e}")

if __name__ == "__main__":
    asyncio.run(main())
